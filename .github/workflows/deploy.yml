name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r dist deploy/
        cp package*.json deploy/
        cp docker-compose.yml deploy/
        cp Dockerfile deploy/
        tar -czf deploy.tar.gz -C deploy .

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy.tar.gz

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          # 배포 디렉토리 생성
          sudo mkdir -p /opt/calmato
          cd /opt/calmato

          # 기존 컨테이너 중지 및 제거
          sudo docker compose down || true

          # GitHub에서 최신 코드 가져오기
          if [ -d ".git" ]; then
            sudo git pull origin main
          else
            sudo git clone https://github.com/${{ github.repository }}.git .
          fi

          # 환경 변수 파일 설정 (secrets에서)
          sudo tee .env > /dev/null <<EOF
          NODE_ENV=production
          PORT=3000

          # JWT 설정
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=7d

          # 데이터베이스 설정
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_SSL=${{ secrets.DB_SSL }}
          TYPEORM_SYNC=${{ secrets.TYPEORM_SYNC }}
          TYPEORM_LOGGING=${{ secrets.TYPEORM_LOGGING }}

          # CORS 설정
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}

          # Swagger 설정
          SWAGGER_ENABLE=true

          # 로그 설정
          LOG_LEVEL=info

          # AWS S3 설정
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          EOF

          # Docker 이미지 빌드 및 컨테이너 시작
          sudo docker compose build --no-cache
          sudo docker compose up -d

          # 로그 확인
          echo "Container status:"
          sudo docker compose ps

    # - name: Notify deployment status
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     channel: '#deployments'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #     fields: repo,message,commit,author,action,eventName,ref,workflow
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
